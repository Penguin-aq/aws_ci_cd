# This is a basic workflow to help you get started with Actions

name: TEST

concurrency : dev #동시성 부여 동일 환경다중실행 방지

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  TEST_FILE_NAME: test_variables
  AAA: BBBB
  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      ouputName: ${{ steps.v.outputs.ouputName }} # 변수 설정
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
              
      #빌드 스킵변수
      - name: stpsname
        id: v
        run: |
          echo "::set-output name=ouputName::temp"
          
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout
        #if: ${{ jobs.build.outputs.isBuild }}
        uses: actions/checkout@v2

      - name: script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          echo ${{ steps.v.outputs.ouputName }}
          mkdir ./temp
          mkdir ./temp/dir
          ls -la 
          echo ${{ github.sha }} >> ./temp/${{ env.TEST_FILE_NAME }}
          echo ${{ github.sha }} >> ./temp/dir/${{ env.TEST_FILE_NAME }}
          echo "----------------"
          tail ./temp/${{ env.TEST_FILE_NAME }}
          echo "----------------"
          ls -la
          
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: homework
          path: ./*
#다중 라인 제외추가
#          path: |
#            ./*
#            !제외


#       re run 변수
      - name: Previous succeeded job
        id: success
        uses: actions/cache@v2
        with:
          path: success-job-${{ github.sha }}-${{ matrix.name }}
          key: success-job-job-${{ github.sha }}-${{ matrix.name }}
      
      # re run 확인
#       - name: Composer cache
#         if: steps.success.outputs.cache-hit != 'true'
#         uses: actions/cache@v2
#         with:
#           path: vendor
#           key: composer-${{ hashFiles('composer.lock') }}
      
#       - name: tttt
          if: steps.success.outputs.cache-hit == ''
          run : echo "done" > success-job-${{ github.sha }}-${{ matrix.name }}

  deploy:
    name: deploy
    needs: build  # 없으면 동시실행
    runs-on: ubuntu-latest
    outputs:
      ouputName: ${{ needs.build.outputs.ouputName }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: homework
      - name: script
        run: |
          echo ${{ needs.build.outputs.ouputName }}
          echo "----------------"
          ls -la 
          echo "----------------"
      
              
      - name: Deliver File
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_IP }}
          username: ${{ secrets.REMOTE_SSH_ID }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          port: ${{ secrets.REMOTE_SSH_PORT }}
          source: "temp/*"
          target: "github/"
          rm: true

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_IP }}
          username: ${{ secrets.REMOTE_SSH_ID }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          port: ${{ secrets.REMOTE_SSH_PORT }}
          script: |
            echo test >> test
            
                       
#   deploy_production:
#     name: deploy_production
#     needs: build  # 없으면 동시실행
#     runs-on: ubuntu-latest
#     environment:  #승인배포
#       name: production
#       url: https://github.com
#     steps:
#       - name: Download artifact
#         uses: actions/download-artifact@v2
#         with:
#           name: homework
#       - name: script
#         run: |
#           echo ${{ secrets.ENVIRONMENTS_SECRETS }} >> ./test #environment secrets은 승인된곳에서만 사용가능
#       - name: Deliver File
#         uses: appleboy/scp-action@master
#         with:
#           host: ${{ secrets.REMOTE_IP }}
#           username: ${{ secrets.REMOTE_SSH_ID }}
#           key: ${{ secrets.REMOTE_SSH_KEY }}
#           port: ${{ secrets.REMOTE_SSH_PORT }}
#           source: "test"
#           target: "github2/"
#           #rm: true
